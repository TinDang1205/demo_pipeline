# Xcode
# Build, test, and archive an Xcode workspace on macOS.
# Add steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xcode

trigger:
  - master

pool:
  vmImage: 'macos-latest'

stages:
  - stage: AndroidStage
    dependsOn: [ ]
    displayName: Android
    jobs:

      - job: AndroidJob
        displayName: Android
        steps:

          - task: DownloadSecureFile@1
            name: keyprop
            displayName: Download key properties file
            inputs:
              secureFile: 'key.properties'

          - task: DownloadSecureFile@1
            name: key
            displayName: Download signing key
            inputs:
              secureFile: 'keystore.jks'

          - task: Bash@3
            displayName: Copy config files
            inputs:
              targetType: 'inline'
              script: |
                cp $(keyprop.secureFilePath) $(Build.SourcesDirectory)/android/keystores/key.properties
                cp $(key.secureFilePath) $(Build.SourcesDirectory)/android/keystores/keystore.jks
                
                echo "key.properties copied to $(Build.SourcesDirectory)/android/keystores/key.properties"
                echo "keystore.jks copied to $(Build.SourcesDirectory)/android/keystores/keystore.jks"
          - task: FlutterInstall@0
            displayName: "Install Flutter SDK"
            inputs:
              mode: 'auto'
              channel: 'stable'
              version: 'latest'

          - task: FlutterBuild@0
            displayName: "Build application"
            inputs:
              target: 'aab'
              projectDirectory: '$(Build.SourcesDirectory)'

          - task: FlutterTest@0
            displayName: "Run unit tests"
            inputs:
              generateCodeCoverageReport: true
              projectDirectory: '$(Build.SourcesDirectory)'

          - task: CopyFiles@2
            displayName: "Copy app to staging directory"
            inputs:
              sourceFolder: '$(Agent.BuildDirectory)'
              contents: '**/bundle/**'
              targetFolder: '$(Build.StagingDirectory)'
              flattenFolders: true

          - task: PublishBuildArtifacts@1
            displayName: "Publish AAB file"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'AAB'
              publishLocation: 'Container'
